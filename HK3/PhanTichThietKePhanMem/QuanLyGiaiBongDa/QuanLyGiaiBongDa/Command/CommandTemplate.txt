//------------------------------------------------------------------------------
// <auto-generated>
//     text template column for binding
//
//     Auto refresh
// </auto-generated>
//------------------------------------------------------------------------------

using System.Windows.Input;
using Microsoft.TeamFoundation.MVVM;
using QuanLyGiaiBongDa.Common;
using QuanLyGiaiBongDa.ViewModels;
namespace <#= NamespaceName #>
{

	partial class <#= ClassName #> : BaseViewModel
	{

<# foreach(Command c in _commands) { #>
		private ICommand _<#= c.CamelName #>Command;

		public ICommand <#= c.Name #>Command
		{
			get
			{
				if (_<#= c.CamelName #>Command == null)
				{
<#			if (c.HasCanExecute) #>
<#			{	 #>
					_<#= c.CamelName #>Command = 
						new RelayCommand(Execute<#= c.Name #>Command, CanExecute<#= c.Name #>Command);
<#			}	 #>
<#			else #>
<#			{	 #>
					_<#= c.CamelName #>Command = new RelayCommand(Execute<#= c.Name #>Command);
<#			}	 #>
				}
				return _<#= c.CamelName #>Command;
			}
		}

<# } #>
	}
}

<#+
	class Command
	{
		public string Name { get; set; }
		public bool HasCanExecute { get; set; }
		public string CamelName
		{
			get
			{
				return char.ToLower(Name[0]) + Name.Substring(1);
			}
		}
	}

	private static Command[] _commands = CreateCommand();

	private static Command[] CreateCommand()
	{
		Command[] result = new Command[Values.GetLength(0)];
		for(int i = 0; i < result.Length; i++)
		{
			result[i] = new Command() { Name = Values[i, 0], HasCanExecute = bool.Parse(Values[i, 1]) };
		}
		return result;
	}
#>