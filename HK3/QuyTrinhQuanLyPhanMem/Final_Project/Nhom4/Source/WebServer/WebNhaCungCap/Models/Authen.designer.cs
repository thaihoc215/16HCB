#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebNhaCungCap.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Database")]
	public partial class AuthenDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertSecurityCodeBackup(SecurityCodeBackup instance);
    partial void UpdateSecurityCodeBackup(SecurityCodeBackup instance);
    partial void DeleteSecurityCodeBackup(SecurityCodeBackup instance);
    #endregion
		
		public AuthenDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DatabaseConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public AuthenDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AuthenDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AuthenDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AuthenDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<SecurityCodeBackup> SecurityCodeBackups
		{
			get
			{
				return this.GetTable<SecurityCodeBackup>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _iDUser;
		
		private string _username;
		
		private string _secretKey;
		
		private bool _isEnable;
		
		private EntitySet<SecurityCodeBackup> _SecurityCodeBackups;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OniDUserChanging(int value);
    partial void OniDUserChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnsecretKeyChanging(string value);
    partial void OnsecretKeyChanged();
    partial void OnisEnableChanging(bool value);
    partial void OnisEnableChanged();
    #endregion
		
		public User()
		{
			this._SecurityCodeBackups = new EntitySet<SecurityCodeBackup>(new Action<SecurityCodeBackup>(this.attach_SecurityCodeBackups), new Action<SecurityCodeBackup>(this.detach_SecurityCodeBackups));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iDUser", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int iDUser
		{
			get
			{
				return this._iDUser;
			}
			set
			{
				if ((this._iDUser != value))
				{
					this.OniDUserChanging(value);
					this.SendPropertyChanging();
					this._iDUser = value;
					this.SendPropertyChanged("iDUser");
					this.OniDUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_secretKey", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string secretKey
		{
			get
			{
				return this._secretKey;
			}
			set
			{
				if ((this._secretKey != value))
				{
					this.OnsecretKeyChanging(value);
					this.SendPropertyChanging();
					this._secretKey = value;
					this.SendPropertyChanged("secretKey");
					this.OnsecretKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isEnable", DbType="Bit NOT NULL")]
		public bool isEnable
		{
			get
			{
				return this._isEnable;
			}
			set
			{
				if ((this._isEnable != value))
				{
					this.OnisEnableChanging(value);
					this.SendPropertyChanging();
					this._isEnable = value;
					this.SendPropertyChanged("isEnable");
					this.OnisEnableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_SecurityCodeBackup", Storage="_SecurityCodeBackups", ThisKey="iDUser", OtherKey="iDUser")]
		public EntitySet<SecurityCodeBackup> SecurityCodeBackups
		{
			get
			{
				return this._SecurityCodeBackups;
			}
			set
			{
				this._SecurityCodeBackups.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SecurityCodeBackups(SecurityCodeBackup entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_SecurityCodeBackups(SecurityCodeBackup entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SecurityCodeBackup")]
	public partial class SecurityCodeBackup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _iDSecurityCodeBackup;
		
		private string _secutityCode;
		
		private bool _isUsed;
		
		private int _iDUser;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OniDSecurityCodeBackupChanging(int value);
    partial void OniDSecurityCodeBackupChanged();
    partial void OnsecutityCodeChanging(string value);
    partial void OnsecutityCodeChanged();
    partial void OnisUsedChanging(bool value);
    partial void OnisUsedChanged();
    partial void OniDUserChanging(int value);
    partial void OniDUserChanged();
    #endregion
		
		public SecurityCodeBackup()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iDSecurityCodeBackup", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int iDSecurityCodeBackup
		{
			get
			{
				return this._iDSecurityCodeBackup;
			}
			set
			{
				if ((this._iDSecurityCodeBackup != value))
				{
					this.OniDSecurityCodeBackupChanging(value);
					this.SendPropertyChanging();
					this._iDSecurityCodeBackup = value;
					this.SendPropertyChanged("iDSecurityCodeBackup");
					this.OniDSecurityCodeBackupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_secutityCode", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string secutityCode
		{
			get
			{
				return this._secutityCode;
			}
			set
			{
				if ((this._secutityCode != value))
				{
					this.OnsecutityCodeChanging(value);
					this.SendPropertyChanging();
					this._secutityCode = value;
					this.SendPropertyChanged("secutityCode");
					this.OnsecutityCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isUsed", DbType="Bit NOT NULL")]
		public bool isUsed
		{
			get
			{
				return this._isUsed;
			}
			set
			{
				if ((this._isUsed != value))
				{
					this.OnisUsedChanging(value);
					this.SendPropertyChanging();
					this._isUsed = value;
					this.SendPropertyChanged("isUsed");
					this.OnisUsedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iDUser", DbType="Int NOT NULL")]
		public int iDUser
		{
			get
			{
				return this._iDUser;
			}
			set
			{
				if ((this._iDUser != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OniDUserChanging(value);
					this.SendPropertyChanging();
					this._iDUser = value;
					this.SendPropertyChanged("iDUser");
					this.OniDUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_SecurityCodeBackup", Storage="_User", ThisKey="iDUser", OtherKey="iDUser", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.SecurityCodeBackups.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.SecurityCodeBackups.Add(this);
						this._iDUser = value.iDUser;
					}
					else
					{
						this._iDUser = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
